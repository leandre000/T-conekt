generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TALENT
  HIRER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  GIG
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole
  stripeCustomerId  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Profile relations
  talentProfile TalentProfile?
  hirerProfile  HirerProfile?

  // Auth relations
  accounts Account[]
  sessions Session[]

  // Application relation (FIXED)
  applications Application[] @relation("UserApplications")

  // Review relations
  reviewsGiven    Review[] @relation("Reviewer")
  reviewsReceived Review[] @relation("Reviewed")

  // Message relations
  messagesSent     Message[] @relation("MessageSender")
  // Conversation relations
  conversationsAsParticipant1 Conversation[] @relation("ConversationParticipant1")
  conversationsAsParticipant2 Conversation[] @relation("ConversationParticipant2")
  // Event relations
  organizedEvents Event[] @relation("EventOrganizer")
  eventParticipations EventParticipant[] @relation("EventParticipant")
  // Forum relations
  forumThreads ForumThread[] @relation("ForumThreadAuthor")
  forumReplies ForumReply[] @relation("ForumReplyAuthor")
  // Subscription relations
  subscriptions Subscription[]
  // Notification relations
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model TalentProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  title        String?
  bio          String?  @db.Text
  skills       String[]
  experience   String?  @db.Text
  education    String?  @db.Text
  location     String?
  ratePerHour  Float?
  hourlyRate   Float?
  availability String?
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio    PortfolioItem[]
  applications Application[]
  contracts    Contract[]

  @@map("talent_profiles")
}

model HirerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String?
  companySize String?
  industry    String?
  location    String?
  description String?  @db.Text
  website     String?
  websiteUrl  String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPostings JobPosting[]
  contracts   Contract[]

  @@map("hirer_profiles")
}

model PortfolioItem {
  id          String   @id @default(cuid())
  talentId    String
  type        String
  title       String
  description String?  @db.Text
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  talent TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model JobPosting {
  id             String    @id @default(cuid())
  hirerId        String
  title          String
  description    String    @db.Text
  skillsRequired String[]
  budget         Float?
  jobType        JobType
  location       String?
  deadline       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  hirer        HirerProfile  @relation(fields: [hirerId], references: [id], onDelete: Cascade)
  applications Application[]
  contracts   Contract[]

  @@map("job_postings")
}

model Application {
  id          String            @id @default(cuid())
  jobId       String
  talentId    String
  userId      String?
  coverLetter String?           @db.Text
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  job    JobPosting    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  talent TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  user   User?         @relation("UserApplications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

enum ContractStatus {
  DRAFT
  ACTIVE
  COMPLETED
  TERMINATED
}

model Contract {
  id             String         @id @default(cuid())
  jobId          String
  talentId       String
  hirerId        String
  status         ContractStatus @default(DRAFT)
  terms          String?        @db.Text
  startDate      DateTime?
  endDate        DateTime?
  paymentAmount  Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  job    JobPosting    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  talent TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  hirer  HirerProfile @relation(fields: [hirerId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

enum EventType {
  WORKSHOP
  CONFERENCE
  NETWORKING
  HACKATHON
  WEBINAR
  MEETUP
}

model Event {
  id                   String    @id @default(cuid())
  title                String
  description          String    @db.Text
  startDate            DateTime
  endDate              DateTime
  location             String?
  type                 EventType
  maxParticipants      Int?
  registrationDeadline DateTime?
  price                Float?
  organizerId          String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  organizer    User              @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  participants EventParticipant[]

  @@map("events")
}

model EventParticipant {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    String   @default("REGISTERED") // REGISTERED, ATTENDED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation("EventParticipant", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participants")
}

model ForumThread {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  authorId  String
  category  String   @default("GENERAL")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author  User         @relation("ForumThreadAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  replies ForumReply[]

  @@map("forum_threads")
}

model ForumReply {
  id        String   @id @default(cuid())
  content   String   @db.Text
  threadId  String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User        @relation("ForumReplyAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("forum_replies")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String
  planId    String
  status    SubscriptionStatus @default(PENDING)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int      // in days
  features    String[] // array of feature strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  read      Boolean  @default(false)
  type      String   @default("INFO") // INFO, SUCCESS, WARNING, ERROR
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Review {
  id         String   @id @default(cuid())
  reviewerId String
  reviewedId String
  score      Int
  comment    String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  reviewer User @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewed User @relation("Reviewed", fields: [reviewedId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Conversation {
  id              String   @id @default(cuid())
  participant1Id  String
  participant2Id  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  participant1 User @relation("ConversationParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2 User @relation("ConversationParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  messages     Message[]

  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String        @db.Text
  read           Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender      User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}
