generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TALENT
  HIRER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  GIG
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile relations
  talentProfile TalentProfile?
  hirerProfile  HirerProfile?

  // Auth relations
  accounts Account[]
  sessions Session[]

  // Application relation (FIXED)
  applications Application[] @relation("UserApplications")

  // Review relations
  reviewsGiven    Review[] @relation("Reviewer")
  reviewsReceived Review[] @relation("Reviewed")

  // Message relations
  messagesSent     Message[] @relation("Sender")
  messagesReceived Message[] @relation("Receiver")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model TalentProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?  @db.Text
  skills       String[]
  location     String?
  ratePerHour  Float?
  availability String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio    PortfolioItem[]
  applications Application[]

  @@map("talent_profiles")
}

model HirerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String?
  industry    String?
  location    String?
  description String?  @db.Text
  websiteUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPostings JobPosting[]

  @@map("hirer_profiles")
}

model PortfolioItem {
  id          String   @id @default(cuid())
  talentId    String
  type        String
  title       String
  description String?  @db.Text
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  talent TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model JobPosting {
  id             String    @id @default(cuid())
  hirerId        String
  title          String
  description    String    @db.Text
  skillsRequired String[]
  budget         Float?
  jobType        JobType
  location       String?
  deadline       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  hirer        HirerProfile  @relation(fields: [hirerId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("job_postings")
}

model Application {
  id          String            @id @default(cuid())
  jobId       String
  talentId    String
  userId      String?
  coverLetter String?           @db.Text
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  job    JobPosting    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  talent TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  user   User?         @relation("UserApplications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model Review {
  id         String   @id @default(cuid())
  reviewerId String
  reviewedId String
  score      Int
  comment    String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  reviewer User @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewed User @relation("Reviewed", fields: [reviewedId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String   @db.Text
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}
